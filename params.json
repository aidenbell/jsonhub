{"name":"Jsonhub","tagline":"The JSON Pub/Sub","body":"# jsonhub - A Pattern Matching Pub/Sub\r\nA publish/subscribe message queue with JSON pattern matching based subscriptions.\r\n\r\nAny JSON value is a valid message and clients can subscribe to an exchange using a description of the JSON messages they wish to match against. The client will then obtain messages that match the pattern. Subscription patterns are themselves JSON and can contain \"match values\" to specify more complex matching such as greater-than and less-than matches, geospatial matches and case insensitive matches.\r\n\r\n## Install\r\nAs jsonhub is a Go application, downloading and building it is pretty easy if you have the Go tools installed and setup. Just run\r\n\r\n```sh\r\ngo get github.com/aidenbell/jsonhub/jsonhubd\r\n```\r\n\r\nand then\r\n\r\n```sh\r\n]$ cd $GOPATH/src/github.com/aidenbell/jsonhub/jsonhubd\r\n]$ $GOPATH/bin/jsonhubd\r\n2015/02/04 23:21:40 JSON Message Queue\r\n2015/02/04 23:21:40 Running server on port 9977\r\n```\r\nYou can then find a Javascript test client at http://localhost:9977/client/ , POSTing JSON and listening for messages happens on http://localhost:9977/ .\r\n\r\n## Example Messages and Subscriptions\r\n\r\n### Example Published Message\r\nImagine an RFID office entry system for a shared office building. Every time a person uses their entry card, a message detailing the access is sent to the message queue with the details of the person and the area of the building their card gives them access to.\r\n```json\r\n{\r\n  \"name\" : \"Dave\",\r\n  \"age\" : 22,\r\n  \"occupation\": \"Programmer\",\r\n  \"hardware\" : [ \"monitor\", \"workstation\", \"laptop\", \"chair\" ],\r\n  \"employer\" : {\r\n    \"name\": \"Big Co Inc\",\r\n    \"address1\" : \"123 BigCo Lane\",\r\n    \"address2\" : \"Businesston\",\r\n    \"postcode\" : \"ABC XYZ\"\r\n  },\r\n  \"access_area\": {\r\n    \"type\": \"Polygon\",\r\n    \"coordinates\": [\r\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]\r\n    ]\r\n  },\r\n  \"door\": \"stair-22\",\r\n  \"granted\" : true\r\n}\r\n```\r\n\r\n### Sub 1: Value Comparison\r\nAn client could subscribe using the following pattern and obtain the details of any programmer aged 22\r\naccessing the building\r\n```json\r\n{\r\n  \"age\" : 22,\r\n  \"occupation\" : \"Programmer\"\r\n}\r\n```\r\n\r\n### Sub 2: Using Matcher Values\r\nWe can also use \"matchers\" to find all programmers older than 22 entering the building\r\n```json\r\n{\r\n  \"age\" : {\r\n      \"__match__\" : \"greater-than\",\r\n      \"value\" : 22\r\n    },\r\n  \"occupation\" : {\r\n    \"__match__\" : \"case-insensitive\",\r\n    \"value\" : \"programmer\"\r\n  }\r\n}\r\n```\r\n\r\n### Sub 3: Match Everything\r\nYou can match against all messages using an empty subscription\r\n```json\r\n{}\r\n```\r\nThis is because subscriptions match unless a portion of the pattern does *not*\r\nmatch against the message. Each attribute of a subscription object must match the message. If you provide no attributes, there are no match constraints to fail. This allows you to only list your constraints when matching without having to describe an entire object.\r\n\r\n## Matchers\r\nAside from basic value comparison, subscriptions can contain special \"matcher\" objects that describe more complex matches in JSON format. The following matchers are supported (todo: link these to .md files)\r\n\r\n  * [Case insensitive string matching](https://github.com/aidenbell/jsonhub/blob/master/match_modules/ext_ci_match/README.md)\r\n  * GeoJSON based 'within'\r\n\r\n## Server Sent Events\r\nCurrently matching messages are polled via [Server Sent Events](http://dev.w3.org/html5/eventsource/). Websocket support and other protocols are planned.\r\n\r\n## Future\r\nFuture and needed features include\r\n\r\n  * Websocket support\r\n  * Multiple named exchanges\r\n  * Configurable message distribution for equivalent patterns (round-robin, random)\r\n  * Negations in patterns\r\n  * Various matchers\r\n  * Support for sending arrays of messages and providing arrays of subscriptions\r\n\r\n\r\n## Disclaimer\r\nThis is a little side project I use to learn Go. The source probably isn't very nice or idiomatic, but as I learn I refactor and improve it. It is also missing some important features like negation, tests, documentation etc. Pull requests welcome.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}